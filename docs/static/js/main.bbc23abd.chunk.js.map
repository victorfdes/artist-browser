{"version":3,"sources":["common/utils/utils.ts","common/components/SongBlock.tsx","common/components/Loader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["msToString","ms","_ms","Math","round","secs","mins","floor","substr","length","parseRecording","recording","artist","name","id","title","release","duration","SongBlock","props","className","style","background","color","Loader","src","alt","aria-hidden","width","height","App","useState","recordings","setRecordings","recordingsLoading","setRecordingsLoading","currentPage","setCurrentPage","recordingsCount","setRecordingsCount","colors","loaderRef","useRef","document","createElement","handleInfinityLoad","debounce","cP","useEffect","a","fetch","method","headers","_response","json","_recordings","count","allRecordings","forEach","r","getRelease","target","current","observer","IntersectionObserver","entries","console","log","isIntersecting","root","rootMargin","threshold","observe","unobserve","Object","values","map","index","onClick","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oPAAaA,EAAa,SAACC,GACzB,IAAKA,EACH,MAAO,GAET,IAAIC,EAAMC,KAAKC,MAAMH,EAAK,KACpBI,EAAQ,IAAMH,EAAM,GACpBI,EAAOH,KAAKI,MAAML,EAAM,IAC9B,MAAM,GAAN,OAAUI,EAAV,iBAAuBD,EAAKG,OAAOH,EAAKI,OAAS,GAAjD,aAGWC,EAAiB,SAACC,GAC7B,IAAMC,EAASD,GAAaA,EAAU,kBAAoBA,EAAU,iBAAiB,IAAMA,EAAU,iBAAiB,GAAGE,KACzH,MAAQ,CACNC,GAAIH,EAAUG,GACdC,MAAOJ,EAAUI,MACjBH,SACAI,QAASL,EAAU,sBACnBM,SAAUN,EAAUF,S,OCLT,SAASS,EAAWC,GAKjC,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,wBAAwBC,MANnB,CACtBC,WAAW,yBAAD,OAA2BH,EAAMI,MAAjC,gCAKR,SACIJ,EAAMP,QAAUO,EAAMP,OAAO,KAEjC,sBAAKQ,UAAU,uBAAf,UACE,qBAAKA,UAAU,oBAAf,SAAqCD,EAAMJ,QAC3C,sBAAKK,UAAU,qBAAf,gBAAyCD,EAAMP,UAC/C,qBAAKQ,UAAU,sBAAf,SAAuCD,EAAMH,UAC7C,qBAAKI,UAAU,uBAAf,SAAwCpB,EAAWmB,EAAMF,kBC1BlD,SAASO,IACtB,OAAQ,qBAAKC,IAAI,qBAAqBC,IAAI,SAASC,cAAY,OAAOC,MAAM,KAAKC,OAAO,OCkG3EC,MAzFf,WAAiB,IAAD,EACsBC,mBAAS,IAD/B,mBACPC,EADO,KACKC,EADL,OAEoCF,oBAAS,GAF7C,mBAEPG,EAFO,KAEYC,EAFZ,OAGwBJ,mBAAS,GAHjC,mBAGPK,EAHO,KAGMC,EAHN,OAIgCN,mBAAS,GAJzC,mBAIPO,EAJO,KAIUC,EAJV,KAMRC,EAAS,CAAC,UAAW,UAAW,UAAW,WAE3CC,EAAYC,iBAAOC,SAASC,cAAc,QAE1CC,EAAqBC,KAAS,WAClCT,GAAe,SAAAU,GAAE,OAAIA,EAAK,OACzB,KAoEH,OAlEAC,qBAAU,YACQ,uCAAG,gCAAAC,EAAA,6DACjBd,GAAqB,GADJ,SAEOe,MAAM,+EAAD,OAA8F,GAAdd,GAAoB,CAC/He,OAAQ,MACRC,QAAS,CACP,OAAU,sBALG,cAEXC,EAFW,OAQjBlB,GAAqB,GARJ,SASSkB,EAAUC,OATnB,QASXC,EATW,SAUEA,EAAYC,QAC7BjB,EAAmBgB,EAAYC,OACzBC,EAA6B,GACnCF,EAAYvB,WAAW0B,SAAQ,SAACC,GAC9BF,EAAcE,EAAE7C,IAAMJ,EAAeiD,MAEvC1B,GAAc,SAAA0B,GAAC,kCACVA,GACAF,OAlBU,2CAAH,qDAsBhBG,KACC,CAACxB,IAEJY,qBAAU,WACR,IAAMa,EAASpB,EAAUqB,QAEnBC,EAAW,IAAIC,sBAAqB,SAACC,GACzCC,QAAQC,IAAI,OAAQF,GAChBA,EAAQ,GAAGG,iBAAmBlC,GAChCW,MAED,CACDwB,KAAM,KACNC,WAAY,MACZC,UAAW,KAOb,OAJIV,IAAW3B,GACb6B,EAASS,QAAQX,GAGZ,kBAAME,EAASU,UAAUZ,MAC/B,CAACpB,EAAWP,EAAmBW,IAsBhC,sBAAKzB,UAAU,MAAf,UAnBOsD,OAAOC,OAAO3C,GAAY4C,KAAI,SAACjE,EAAWkE,GAAZ,OACnC,cAAC3D,EAAD,CAAWK,MAAOiB,EAAOqC,EAAQ,GAAI9D,MAAOJ,EAAUI,MAAOH,OAAQD,EAAUC,OAAQI,QAASL,EAAUK,QAASC,SAAUN,EAAUM,UAAeN,EAAUG,SAK9JX,KAAKI,MAAM+B,EAAkB,KAAOF,IAItC,qBAAKhB,UAAU,YAAf,SACIc,EAAoB,cAACV,EAAD,IACpB,wBAAQJ,UAAU,2BAA2B0D,QAAS,kBAAMzC,EAAeD,EAAc,IAAzF,yBAUJ,qBAAKhB,UAAU,cAAc2D,IAAKtC,QChFzBuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhD,SAASiD,eAAe,SAM1BZ,M","file":"static/js/main.bbc23abd.chunk.js","sourcesContent":["export const msToString = (ms: number) => {\n  if (!ms) {\n    return ''\n  }\n  let _ms = Math.round(ms / 1000)\n  const secs = ('0' + _ms % 60)\n  const mins = Math.floor(_ms / 60)\n  return `${mins} mins ${secs.substr(secs.length - 2)} seconds`\n}\n\nexport const parseRecording = (recording: any) => {\n  const artist = recording && recording['artist-credit'] && recording['artist-credit'][0] && recording['artist-credit'][0].name\n  return ({\n    id: recording.id,\n    title: recording.title,\n    artist,\n    release: recording['first-release-date'],\n    duration: recording.length\n  })\n}\n","import {\n  msToString\n} from '../utils/utils'\n\ntype SongBlockProps = {\n  color: string\n  title: string\n  artist: string\n  release: string\n  duration: number\n}\n\nexport default function SongBlock (props: SongBlockProps) {\n  const getColor = () => ({\n    background: `linear-gradient(0deg, ${props.color} 0%, rgb(231 240 245) 100%)`\n  })\n\n  return (\n    <div className=\"song-block\">\n      <div className=\"song-block--album-art\" style={getColor()}>\n        { props.artist && props.artist[0] }\n      </div>\n      <div className=\"song-block--metadata\">\n        <div className=\"song-block--title\">{ props.title }</div>\n        <div className=\"song-block--artist\">by { props.artist }</div>\n        <div className=\"song-block--release\">{ props.release }</div>\n        <div className=\"song-block--duration\">{ msToString(props.duration) }</div>\n      </div>\n    </div>\n  )\n}\n","export default function Loader () {\n  return (<img src=\"/static/loader.svg\" alt=\"loader\" aria-hidden=\"true\" width=\"64\" height=\"64\" />)\n}\n","import { useEffect, useState, useRef } from 'react'\nimport debounce from 'lodash.debounce'\nimport { parseRecording } from './common/utils/utils'\nimport SongBlock from './common/components/SongBlock'\nimport Loader from './common/components/Loader'\n\ninterface IObjectKeys {\n  [key: string]: any;\n}\n\nfunction App () {\n  const [recordings, setRecordings] = useState({} as IObjectKeys)\n  const [recordingsLoading, setRecordingsLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [recordingsCount, setRecordingsCount] = useState(0)\n\n  const colors = ['#fedd96', '#fe96e8', '#feb896', '#96b0fe']\n\n  const loaderRef = useRef(document.createElement('div'))\n\n  const handleInfinityLoad = debounce(() => {\n    setCurrentPage(cP => cP + 1)\n  }, 200)\n\n  useEffect(() => {\n    const getRelease = async () => {\n      setRecordingsLoading(true)\n      const _response = await fetch(`https://musicbrainz.org/ws/2/recording?query=recording:rain&limit=20&offset=${currentPage * 20}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      })\n      setRecordingsLoading(false)\n      const _recordings = await _response.json()\n      if (_recordings && _recordings.count) {\n        setRecordingsCount(_recordings.count)\n        const allRecordings: IObjectKeys = {}\n        _recordings.recordings.forEach((r: any) => {\n          allRecordings[r.id] = parseRecording(r)\n        })\n        setRecordings(r => ({\n          ...r,\n          ...allRecordings\n        }))\n      }\n    }\n    getRelease()\n  }, [currentPage]);\n\n  useEffect(() => {\n    const target = loaderRef.current\n\n    const observer = new IntersectionObserver((entries) => {\n      console.log('Whaa', entries)\n      if (entries[0].isIntersecting && !recordingsLoading) {\n        handleInfinityLoad()\n      }\n    }, {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.2\n    })\n\n    if (target && !recordingsLoading) {\n      observer.observe(target)\n    }\n\n    return () => observer.unobserve(target)\n  }, [loaderRef, recordingsLoading, handleInfinityLoad])\n  \n  const getSongBlocks = () => {\n    return Object.values(recordings).map((recording, index) => (\n      <SongBlock color={colors[index % 4]} title={recording.title} artist={recording.artist} release={recording.release} duration={recording.duration} key={recording.id} />\n    ))\n  }\n\n  const loadMore = () => {\n    if (Math.floor(recordingsCount / 20) <= currentPage) {\n      return false\n    }\n    return (\n      <div className=\"load-more\">\n        { recordingsLoading ? <Loader /> : (\n          <button className=\"button load-more--button\" onClick={() => setCurrentPage(currentPage + 1)}>Load More</button>\n        ) }\n      </div>\n    ) \n  }\n\n  return (\n    <div className=\"App\">\n      { getSongBlocks() }\n      { loadMore() }\n      <div className=\"intersector\" ref={loaderRef} ></div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}